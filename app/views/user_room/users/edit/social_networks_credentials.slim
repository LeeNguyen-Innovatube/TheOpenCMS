ruby:
  sn_title = t(:title, scope: 'user_room.users.edit.social_networks')

ruby:
  credentials = @user.credentials
  available_to_unlink = @user.credentials.count > 1

  def has_provider?(credentials, name)
    credentials.select{|c| c.provider == name.to_s}.present?
  end

.mb20.fs16.b = sn_title

.ptz_table.w100p.mt30.mb30
  .ptz_tr
    ruby:
      nets = [
        [:vkontakte, :vk, :vk, 500],
        [:odnoklassniki, :odnoklassniki, :ok, 650],
        [:facebook, :facebook, :fb, 500],
        [:twitter, :twitter, :tw, 700],
        [:google_oauth2, 'google-plus', :gp, 500],
      ]

    - nets.each do |item|
        ruby:
          net_name   = item[0]
          fa_class   = item[1]
          short_name = item[2]
          height     = item[3]

        .ptz_td.w100.pr20.tac
          - if has_provider?(credentials, net_name)
            .social_login_btn-unlink-holder
              = link_to '', jsvoid,
                class: "social_login_btn social_login_btn-linked social_login_btn-#{ short_name } fa fa-#{ fa_class }",
                title: t(short_name, scope: 'user_room.users.edit.social_networks')

              - if available_to_unlink
                = link_to delete_provider_path(net_name), method: :delete, class: 'social_login_btn-unlink' do
                  .fa.fa-times.social_login_btn-unlink-icon
          - else
            = link_to '', user_omniauth_authorize_path(net_name),
              data: { height: height },
              class: "js-social_login-btn social_login_btn social_login_btn-#{ short_name } fa fa-#{ fa_class }",
              title: t(short_name, scope: 'user_room.users.edit.social_networks')

          .fs12.ffa.mt10
            = t(short_name, scope: 'user_room.users.edit.social_networks')
